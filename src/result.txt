<?php

require 'Engine/Loader.php';

define('ROOT', __DIR__.'/');

use App\Engine\Loader;
use App\Engine\Auth;
use App\Engine\Router;

Loader::run();



Auth::run();

Router::run();


<?php

namespace App;

class Config{
  CONST 
  DB_HOST = 'localhost',
  DB_NAME = 'hrsibers',
  DB_USER = 'root',
  DB_PASSWORD = 'password',
  
  ADMIN_LOGIN = 'admin',
  ADMIN_PASSWORD = '123';
}
<?php

namespace App\Controller;

use App\Engine\Util;
use App\Model\User;
use App\Engine\Auth;

class AdminController{

  private $oUtil, $User;

  public function __construct(){
    $this->oUtil = new Util();
    $this->User = new User();
  }

  public function index(){     
    
    return $this->oUtil->getView('index');  //serve main page
  }

  public function login(){ //admin login
    if(isset($_POST['admin_login'],$_POST['admin_password'])){  //if post data given  
      $login = $_POST['admin_login'];
      $password = $_POST['admin_password'];
      
      if(Auth::login($login,$password)){
        return $this->oUtil->getView('index');
      }
    }else{  //serve login page
      return $this->oUtil->getView('login');
    }
  }

  public function logout(){
    Auth::destroy();
    header("Location: /");
  }

  public function addUser(){      //Add a user
    if(isset($_POST['login'])){

        try{
          $errorData = $this->User->add($_POST); 
          
          if($errorData){
            return $this->oUtil->getView('form', $errorData); // if witherrors  is not empty return to form page with filled fields
          }
        }
        catch(\PDOException $e){
          // return $this->oUtil->getView('error', $e->getMessage);
        }

      return $this->oUtil->getView('index');
    }else{ //if post data is not set meaning you are to register 
      return $this->oUtil->getView('form');
    }
  }

  public function editUser(){     //Edit a user
    if(isset($_POST['login'])){
      
      try{
        $errorData = $this->User->edit($_POST,$_GET['id']);

        if($errorData){
          return $this->oUtil->getView('form', $errorData);
        }else{
          return $this->oUtil->getView('index');
        }
      }
      catch(\PDOException $e){
        return $this->oUtil->getView('error',$e->getMessage);
      }

    }else if(isset($_GET['id'])){
      
      $editUser = $this->User->getOneById($_GET['id']);

      if($editUser!==null){
        return $this->oUtil->getView('form',$editUser);
      }
    }

    return $this->oUtil->getView('error','Something wrong happened');
  }

  public function userInfo(){
    if(isset($_GET['id'])){

      try{
        $user = $this->User->getOneById($_GET['id']);
        if($user){
          return $this->oUtil->getView('profile',$user);
        }
        else{
          return $this->oUtil->getView('error','There is no user with this id');
        }
      }catch(\PDOException $e){
        return $this->oUtil->getView('error', $e->getMessage());
      }
    }else{
      header("Location: /");
    }
  }

  public function allUsers(){
    $usersArray = $this->User->getAll();

    return $this->oUtil->getView('index', $usersArray);
  }

  public function test(){
    var_dump($_POST);
  }

  public function error($message){

    return $this->oUtil->getView('error',$message);
  }

  public function checkLogin(){     //
    if(isset($_GET['login'])){
      $result = $this->User->checkLogin($_GET['login']);

      if($result){
        $message= true;
      }
      else{
        $message = false;
      }
      echo $message;
      return $message;
    }
  }


  public function notFound(){
    return $this->oUtil->getView('notFound');
  }
}

<?php

namespace App\Engine;

use App\Config;

class Auth{

  private static $uid;

  public static function run(){
    session_start();

    if(!self::isLoggedIn()){
      // self::destroy();
    }
  }

  public static function isLoggedIn(){
    $isLoggedIn = isset($_SESSION)&&isset($_SESSION['UID']);

    return $isLoggedIn;
  }

  public static function login($login,$password){
    if($login === Config::ADMIN_LOGIN && $password === Config::ADMIN_PASSWORD){
      
      self::$uid = uniqid();
      $_SESSION['UID'] = self::$uid;
      // echo self::$uid;
      return true;
    }
    return false;
  }


  public static function destroy(){
    session_unset();
    session_destroy();
  }
}

//todo many
<?php

namespace App\Engine;
use App\Config;

class Db extends \PDO{

  
  public function __construct(){

    parent::__construct('mysql:host='.Config::DB_HOST.';dbname='.Config::DB_NAME.';', Config::DB_USER, Config::DB_PASSWORD);
    $this->setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION);
  }


}
<?php


namespace App\Engine;


class Loader{


  
  public static function run(){
    spl_autoload_register(array(__CLASS__,'autoload'));
  }


  private static function autoload($className){
    $pathParts = explode('\\',$className);


    array_shift($pathParts); //take away APP part
 

    $pathToClass =  ROOT . implode('/',$pathParts) . '.php';

    if(is_file($pathToClass)){
      require_once $pathToClass;
    }
  }
}
<?php

namespace App\Engine;

use App\Controller\AdminController;
use App\Engine\Auth;

class Router{
  
  private static $Controller;

  public static function run(){

    $Controller = new AdminController();
    $uri = $_SERVER['REQUEST_URI'];
    


    if(Auth::isLoggedIn()){
      try{
        switch($uri){
          case '/':
            $Controller->index();break;
          case '/test':
            $Controller->test();break;
          case '/add':
            $Controller->addUser();break;
          case preg_match('/\/edit\?id=.+/',$uri)?true:false: // /edit?id=blabla
            $Controller->editUser();break;
          case preg_match('/\/profile\?id=.+/',$uri)?true:false: // /profile?id=blabla
            $Controller->userInfo();break;
          case '/all':
            $Controller->allUsers();break;
          case preg_match('/\/check\?login=.+/',$uri)?true:false: 
            $Controller->checkLogin();break;
          case '/error':
            $Controller->error('routetest');break;
          case '/logout':
            $Controller->logout();break;
          default:
          $Controller->notFound();break;
        }
      }
      catch(Exception $e){
        $Controller->error($e->getMessage);
      }
    }else{
      if($uri!=='/login'){
        header("Location: /login");
      }
      else{
        $Controller->login();
      }
    }
  }
}

<?php

namespace App\Engine;


class Util{


  public function getView($viewName,$data=null){
    $viewPath = ROOT . 'View/'. $viewName . '.php';
    if(is_file($viewPath))
      require $viewPath;
    else
    {
      echo 'Something\'s wrong!'; 
      exit();
    }
  }
}
<?php

namespace App\Engine\traits;


trait Singleton {
    private static $instance = null;

    private function __construct() { /* ... @return Singleton */ }  // Защищаем от создания через new Singleton
    private function __clone() { /* ... @return Singleton */ }  // Защищаем от создания через клонирование
    private function __wakeup() { /* ... @return Singleton */ }  // Защищаем от создания через unserialize

    public static function getInstance() {
		return 
		self::$instance===null
			? self::$instance = new static() // Если $instance равен 'null', то создаем объект new self()
			: self::$instance; // Иначе возвращаем существующий объект 
    }
}
<?php

namespace App\Model;

use App\Engine\Db;
use App\Model\UserHelper;

class User{
  
  private $oDb, $oHelper;

  public function __construct(){
    $this->oDb = new Db();
    $this->oHelper = new UserHelper();
  }

  public function getOne($login){
    $stmt = $this->oDb->prepare('SELECT * FROM users WHERE login=:login LIMIT 1');

    $stmt->bindValue(':login',$login);
    $stmt->execute();
    
    $user = $stmt->fetch(\PDO::FETCH_ASSOC);
    return $this->oHelper->transform($user, false);
  }

  public function getOneById($id){
    $stmt = $this->oDb->prepare('SELECT * FROM users WHERE id=:id LIMIT 1');

    $stmt->bindValue(':id',$id);
    $stmt->execute();
    
    $user = $stmt->fetch(\PDO::FETCH_ASSOC);
    return $this->oHelper->transform($user, false);
  }


  public function getAll(){
    $stmt = $this->oDb->query(
      "SELECT * FROM users"
    );

    $users = $stmt->fetchAll(\PDO::FETCH_ASSOC);
    return $users;
  }

  public function add($userData){
    $errors = $this->oHelper->validate($userData);
    if(empty($errors))
    {
      //transform transformed data, add hash to password, add uuid
      $transformed = $this->oHelper->transform($userData,true);
      //prepare SQL query
      $stmt = $this->oDb->prepare(
        "INSERT INTO users(UID, login, password, firstName, lastName, sex, birthDate) 
        VALUES( :UID, :login, :password, :firstName, :lastName, :sex, :birthDate);"
      );
      
      $stmt->bindValue('UID',$transformed['UID']);
      $stmt->bindValue('login',$transformed['login']);
      $stmt->bindValue('password',$transformed['password']);
      $stmt->bindValue('firstName',$transformed['firstName']);
      $stmt->bindValue('lastName',$transformed['lastName']);
      $stmt->bindValue('sex',isset($transformed['sex'])?$transformed['sex']:null);
      $stmt->bindValue('birthDate',$transformed['birthDate']);


      //check for exceptions
      try{
        $stmt->execute();
      }
      catch(\PDOException $e){
        echo $e->getMessage();
      }
    } else //if validate errors
    {
      return $this->oHelper->returnWithErrors($userData, $errors);
    }
    return false; //if successful return false - meaning no errors
  }

  public function edit($userData,$id)
  {
    $errors = $this->oHelper->validate($userData);

    if(empty($errors)){
      $transformed = $this->oHelper->transform($userData, true);

      $stmt = $this->oDb->prepare(
        "UPDATE users SET
          login = :login,
          password = :password,
          firstName = :firstName,
          lastName = :lastName,
          sex = :sex,
          birthDate = :birthDate
          WHERE id = :id"
      );

      $stmt->bindValue(':id',$id);
      $stmt->bindValue(':login',$transformed['login']);
      $stmt->bindValue(':password',$transformed['password']);
      $stmt->bindValue(':firstName',$transformed['firstName']);
      $stmt->bindValue(':lastName',$transformed['lastName']);
      $stmt->bindValue(':sex',$transformed['sex']);
      $stmt->bindValue(':birthDate',$transformed['birthDate']);

      $stmt->execute();
    }else{
      return $this->oHelper->returnWithErrors($userData, $errors);
    }
    return false;
  }



  public function checkLogin($login){
    return $this->oHelper->checkLogin($login);
  }

} 
<?php


namespace App\Model;

use App\Engine\Db;

class UserHelper{
  
  private $oDb;

  public function __construct(){
    $this->oDb = new Db();
  }

  public function checkLogin($login){
    $stmt = $this->oDb->prepare('SELECT COUNT(login) from users WHERE login=:login');

    $stmt->bindValue(':login', $login);
    $stmt->execute();
    
    $result = $stmt->fetch(\PDO::FETCH_ASSOC);

    $key = array_key_first($result);
    if($result[$key]===1){
      return false;
    }else{
      return true;
    }
  }

  public function validate($userData)
  {
    $errors = [];
    $isLoginUnique=null;

    if(isset($userData['login'])){
      $isLoginUnique = $this->checkLogin($userData['login']);
    } //login validate

    if(!$isLoginUnique){
      array_push($errors, 'login'); 
    }
    if(!isset($userData['password']) || mb_strlen($userData['password'])>50){ //password validate
      array_push($errors, 'password'); 
    }
    if(!isset($userData['firstName']) || mb_strlen($userData['firstName'])>50){ //firstname validate
      array_push($errors, 'firstName');
    }
    if(!isset($userData['lastName']) || mb_strlen($userData['lastName'])>50){ //lastname validate
      array_push($errors, 'lastName');
    }
    if(!isset($userData['sex']) || !in_array($userData['sex'],array('male', 'female'))){ //sex validate
      array_push($errors, 'sex');
    }
    if(!isset($userData['birthDate'])){
      array_push($errors, 'birthDate');
    }

    return $errors;

  }

  public function transform($userData,$flag)
  {
    $transformed = $userData;
    if($flag){  // if needed to add to sql table
      $transformed['password'] = password_hash($transformed['password'],PASSWORD_BCRYPT);

      $transformed['UID'] = uniqid();
    }
    else{ // if needed to prepare to fetch it
      $transformed['password'] = null;
    }

    return $transformed;
  }


  public function returnWithErrors($userData, $errFields){
    $userWithErrData = $userData;
    $userWithErrData['password'] =  null; //nullify password field
    foreach($errFields as $errField){
      $userWithErrData[$errField] = null; //nullify error fields
    }

    return $userWithErrData;
  }
}
<?php require 'inc/header.php' ?>

<h1 class="diplay-1 mt-5 text-center error">ERROR: <?=$data?></h1>

<?php require 'inc/footer.php' ?>
<?php require 'inc/header.php' ?>
<?php if(!isset($data)) $user=null; else $user=$data;?>
<?php echo $user['birthDate'];?>

<div>
  <button class="btn btn-outline-secondary my-2" onclick="autocomplete()">Autocomplete</button>
</div>
<div class="container">
  <form action="" method="POST" onsubmit="return checkLogin()">
    <div class="form-group">
      <label for="login">Login</label>
      <input type="text" class="form-control" required id="login" name="login" value="<?=htmlspecialchars($user['login'])?>">
    </div>
    
    <div class="form-group">
      <label for="password">Password</label>
      <input type="password" class="form-control" required id="password" name="password" value="<?=$user['password']?>">
    </div>

    <div class="form-group">
      <label for="firstName">Имя</label>
      <input type="text" class="form-control" required id="firstName" name="firstName" value="<?=htmlspecialchars($user['firstName'])?>">
    </div>

    <div class="form-group">
      <label for="lastName">Фамилия</label>
      <input type="text" class="form-control" required id="lastName" name="lastName" value="<?=htmlspecialchars($user['lastName'])?>">
    </div>

    <div class="form-group">
      <label for="sex">Пол</label>
      <select class="form-control" required id="sex" name="sex">
          <option value="male" <?=$user['sex']==='male'?'selected':''?>>Мужской</option>
          <option value="female" <?=$user['sex']==='female'?'selected':''?>>Женский</option>
        </select>
    </div>

    <div class="form-group">
      <label for="birthDate">Дата рождения</label>
      <input type="date" min='1900-01-01' max='2019-01-01' class="form-control" required id="birthDate" name="birthDate" value="<?=$user['birthDate']?>">
    </div>

    <input type="hidden" value="<?=$user['id']?>">

    <button type="submit" class="btn btn-secondary">Submit</button>
  </form>
</div>

<script>
  async function  checkLogin(event){

    req = new XMLHttpRequest();
    let loginvalue = $('#login').val();

    req.open('GET', '/check?login='+loginvalue, false);
     req.send();
     req.onload = await function(){
      if(this.responseText == 1){
        alert('works!');
        return true;
      }
      else{
        alert('now working!')
        
      }
    }
    return false;
  }
  function autocomplete(){
    $('#login').val(uuidv4('login'));
    $('#password').val(uuidv4('password'));
    $('#firstName').val('inna');
    $('#lastName').val('petrova');
    $('#sex').val('female');
    $('#birthDate').val('2000-01-01');
  }

  function uuidv4(type) {
    let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';
    let login = 'xxxxxxxxxxyxyx';
    let password = 'xxxxxxxxxyyxx';
    let returnval = '';
    switch(type){
      case 'login': returnval=login;break;
      case 'password': returnval=password;break;
      default: returnval=uuid;break;
    }
  return returnval.replace(/[xy]/g, function(c) {
    var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}
</script>

<?php require 'inc/footer.php' ?>
<?php require 'inc/header.php'; ?>

    <main>
      <div class="container text-center">
      <?php if (isset($data)): ?>
        <table class='table table-bordered'> 
          <thead>
            <tr>
                <th scope="col">Username</th>
                <th scope="col">Functions</th>
              </tr>
          </thead>
          <tbody>
          <?php foreach($data as $user): ?>
            <tr>
              <td><?=$user['login']?></td>
              <td>
                <a href="/profile?id=<?=$user['id']?>">Info</a>
                <a href="/edit?id=<?=$user['id']?>">Edit</a>
                <a href='#'>Delete</a>
              </td>
            </tr>
          <?php endforeach ?>
          </tbody>
        </table>
      <?php endif?>
      </div>
    </main>

<?php require 'inc/footer.php'; ?>
<form method="post" action="/login">
  <div class="">
    <label for="login">Username</label>
    <input type="text" name="admin_login" id="admin_login" required>
  </div>

  <div class="">
    <label for="password">Password</label>
    <input type="password" name="admin_password" id="admin_password" required>
  </div>

  <button type="submit" class="">Login</button>
</form>
<h1>NOT FOUND 404</h1>
<?php require 'inc/header.php' ?>
<?php if(!isset($data)) $user=null; else $user=$data?>

    <div class="row m-auto d-flex justify-content-center text-center">
      <div class="d-flex justify-content-between">
        <table class='table table-bordered'>
          <thead>
            <th scope="col">Username</th>
            <th scope="col">First Name</th>
            <th scope="col">Last Name</th>
            <th scope="col">Sex</th>
            <th scope="col">Date of Birth</th>
          </thead>
          <tbody>
            <td><?=$user['login']?></td>
            <td><?=$user['firstName']?></td>
            <td><?=$user['lastName']?></td>
            <td><?=$user['sex']?></td>
            <td><?=$user['birthDate']?></td>
          </tbody>
        </table>
      </div>
    </div>

<?php require 'inc/footer.php' ?>
<h1>test</h1>
    <footer class='d-flex justify-content-center pt-2'>
      <h1 class="display-5">Footer</h1>
      <p><?=$_SESSION['UID']?></p>
      </div>
    </footer>
    
    <script>
    </script>

    <script src="static/bootstrap-4.3.1-dist/js/bootstrap.min.js"></script>
    <script src="static/js/jquery-3.4.1.min.js"></script>
  </body>
</html>
<!DOCTYPE html>
<html>
  <head>
    <link rel="stylesheet" href="static/bootstrap-4.3.1-dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="static/styles.css">

  </head>
  <body>
    <header>
      <nav class="navbar navbar-light bg-light">
          <ul class="navbar-nav d-flex flex-row">
              <li class="nav-item">
                  <a class="navbar-brand nav-link" href="/">Main</a>
              </li>
              <li class="nav-item">
                  <a class="nav-link" href="/add">Add</a>
              </li>
              <li class="nav-item">
                  <a class='nav-link' href="/all">All</a>
              </li>
              <li class="nav-item">
                  <a class='nav-link ml-auto' href="/logout">Logout</a>
              </li>
            </ul>
      </nav>
    </header>
